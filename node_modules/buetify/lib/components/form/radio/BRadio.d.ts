import '../sass/form.sass';
import './radio.sass';
export declare const defineRadio: <T>() => import("vue").DefineComponent<{
    isFocused: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    onFocus: {
        type: import("vue").PropType<(e?: Event | undefined) => void>;
        required: false;
    };
    onBlur: {
        type: import("vue").PropType<(e?: Event | undefined) => void>;
        required: false;
    };
    focusOnMount: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    labelFor: import("vue").PropType<string>;
    label: {
        type: import("vue").PropType<string>;
        default: string;
    };
    isDisabled: {
        type: import("vue").PropType<boolean>;
        required: boolean;
        default: boolean;
    };
    isReadonly: {
        type: import("vue").PropType<boolean>;
        required: boolean;
        default: boolean;
    };
    disableIfReadonly: {
        type: import("vue").PropType<boolean>;
        required: boolean;
        default: boolean;
    };
    modelValue: {
        type: import("vue").PropType<T>;
        required: false;
    };
    'onUpdate:modelValue': {
        type: import("vue").PropType<import("fp-ts/lib/function").FunctionN<[T], void>>;
        default: import("fp-ts/lib/function").Lazy<import("fp-ts/lib/function").FunctionN<[T], void>>;
    };
    eq: {
        type: import("vue").PropType<import("fp-ts/lib/Eq").Eq<T>>;
        default: import("fp-ts/lib/function").Lazy<import("fp-ts/lib/Eq").Eq<T>>;
    };
    nativeValue: {
        type: import("vue").PropType<unknown>;
        required: boolean;
        default: null;
    };
    trueValue: {
        type: import("vue").PropType<T>;
        default: T;
    };
    falseValue: {
        type: import("vue").PropType<T>;
        default: T;
    };
    isIndeterminate: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    isMultiple: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    variant: {
        type: import("vue").PropType<import("../../..").ColorVariant>;
        default: import("../../..").ColorVariant;
    };
    size: {
        type: import("vue").PropType<import("../../..").SizeVariant>;
        default: import("../../..").SizeVariant;
    };
    isRequired: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    name: {
        type: import("vue").PropType<string>;
        required: boolean;
    };
}, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{ [K in "variant" | "size" | "isFocused" | "isDisabled" | "label" | "focusOnMount" | "onUpdate:modelValue" | "isReadonly" | "disableIfReadonly" | "isRequired" | "eq" | "falseValue" | "nativeValue" | "trueValue" | "isMultiple" | "isIndeterminate" | ({
    type: import("vue").PropType<T>;
    required: false;
} extends BooleanConstructor | {
    required: true;
} | {
    default: any;
} | {
    type: BooleanConstructor;
} ? "modelValue" : never)]: {
    isFocused: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    onFocus: {
        type: import("vue").PropType<(e?: Event | undefined) => void>;
        required: false;
    };
    onBlur: {
        type: import("vue").PropType<(e?: Event | undefined) => void>;
        required: false;
    };
    focusOnMount: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    labelFor: import("vue").PropType<string>;
    label: {
        type: import("vue").PropType<string>;
        default: string;
    };
    isDisabled: {
        type: import("vue").PropType<boolean>;
        required: boolean;
        default: boolean;
    };
    isReadonly: {
        type: import("vue").PropType<boolean>;
        required: boolean;
        default: boolean;
    };
    disableIfReadonly: {
        type: import("vue").PropType<boolean>;
        required: boolean;
        default: boolean;
    };
    modelValue: {
        type: import("vue").PropType<T>;
        required: false;
    };
    'onUpdate:modelValue': {
        type: import("vue").PropType<import("fp-ts/lib/function").FunctionN<[T], void>>;
        default: import("fp-ts/lib/function").Lazy<import("fp-ts/lib/function").FunctionN<[T], void>>;
    };
    eq: {
        type: import("vue").PropType<import("fp-ts/lib/Eq").Eq<T>>;
        default: import("fp-ts/lib/function").Lazy<import("fp-ts/lib/Eq").Eq<T>>;
    };
    nativeValue: {
        type: import("vue").PropType<unknown>;
        required: boolean;
        default: null;
    };
    trueValue: {
        type: import("vue").PropType<T>;
        default: T;
    };
    falseValue: {
        type: import("vue").PropType<T>;
        default: T;
    };
    isIndeterminate: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    isMultiple: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    variant: {
        type: import("vue").PropType<import("../../..").ColorVariant>;
        default: import("../../..").ColorVariant;
    };
    size: {
        type: import("vue").PropType<import("../../..").SizeVariant>;
        default: import("../../..").SizeVariant;
    };
    isRequired: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    name: {
        type: import("vue").PropType<string>;
        required: boolean;
    };
}[K] extends null ? any : {
    isFocused: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    onFocus: {
        type: import("vue").PropType<(e?: Event | undefined) => void>;
        required: false;
    };
    onBlur: {
        type: import("vue").PropType<(e?: Event | undefined) => void>;
        required: false;
    };
    focusOnMount: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    labelFor: import("vue").PropType<string>;
    label: {
        type: import("vue").PropType<string>;
        default: string;
    };
    isDisabled: {
        type: import("vue").PropType<boolean>;
        required: boolean;
        default: boolean;
    };
    isReadonly: {
        type: import("vue").PropType<boolean>;
        required: boolean;
        default: boolean;
    };
    disableIfReadonly: {
        type: import("vue").PropType<boolean>;
        required: boolean;
        default: boolean;
    };
    modelValue: {
        type: import("vue").PropType<T>;
        required: false;
    };
    'onUpdate:modelValue': {
        type: import("vue").PropType<import("fp-ts/lib/function").FunctionN<[T], void>>;
        default: import("fp-ts/lib/function").Lazy<import("fp-ts/lib/function").FunctionN<[T], void>>;
    };
    eq: {
        type: import("vue").PropType<import("fp-ts/lib/Eq").Eq<T>>;
        default: import("fp-ts/lib/function").Lazy<import("fp-ts/lib/Eq").Eq<T>>;
    };
    nativeValue: {
        type: import("vue").PropType<unknown>;
        required: boolean;
        default: null;
    };
    trueValue: {
        type: import("vue").PropType<T>;
        default: T;
    };
    falseValue: {
        type: import("vue").PropType<T>;
        default: T;
    };
    isIndeterminate: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    isMultiple: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    variant: {
        type: import("vue").PropType<import("../../..").ColorVariant>;
        default: import("../../..").ColorVariant;
    };
    size: {
        type: import("vue").PropType<import("../../..").SizeVariant>;
        default: import("../../..").SizeVariant;
    };
    isRequired: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    name: {
        type: import("vue").PropType<string>;
        required: boolean;
    };
}[K] extends {
    type: true | null;
} ? any : {
    isFocused: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    onFocus: {
        type: import("vue").PropType<(e?: Event | undefined) => void>;
        required: false;
    };
    onBlur: {
        type: import("vue").PropType<(e?: Event | undefined) => void>;
        required: false;
    };
    focusOnMount: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    labelFor: import("vue").PropType<string>;
    label: {
        type: import("vue").PropType<string>;
        default: string;
    };
    isDisabled: {
        type: import("vue").PropType<boolean>;
        required: boolean;
        default: boolean;
    };
    isReadonly: {
        type: import("vue").PropType<boolean>;
        required: boolean;
        default: boolean;
    };
    disableIfReadonly: {
        type: import("vue").PropType<boolean>;
        required: boolean;
        default: boolean;
    };
    modelValue: {
        type: import("vue").PropType<T>;
        required: false;
    };
    'onUpdate:modelValue': {
        type: import("vue").PropType<import("fp-ts/lib/function").FunctionN<[T], void>>;
        default: import("fp-ts/lib/function").Lazy<import("fp-ts/lib/function").FunctionN<[T], void>>;
    };
    eq: {
        type: import("vue").PropType<import("fp-ts/lib/Eq").Eq<T>>;
        default: import("fp-ts/lib/function").Lazy<import("fp-ts/lib/Eq").Eq<T>>;
    };
    nativeValue: {
        type: import("vue").PropType<unknown>;
        required: boolean;
        default: null;
    };
    trueValue: {
        type: import("vue").PropType<T>;
        default: T;
    };
    falseValue: {
        type: import("vue").PropType<T>;
        default: T;
    };
    isIndeterminate: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    isMultiple: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    variant: {
        type: import("vue").PropType<import("../../..").ColorVariant>;
        default: import("../../..").ColorVariant;
    };
    size: {
        type: import("vue").PropType<import("../../..").SizeVariant>;
        default: import("../../..").SizeVariant;
    };
    isRequired: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    name: {
        type: import("vue").PropType<string>;
        required: boolean;
    };
}[K] extends ObjectConstructor | {
    type: ObjectConstructor;
} ? Record<string, any> : {
    isFocused: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    onFocus: {
        type: import("vue").PropType<(e?: Event | undefined) => void>;
        required: false;
    };
    onBlur: {
        type: import("vue").PropType<(e?: Event | undefined) => void>;
        required: false;
    };
    focusOnMount: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    labelFor: import("vue").PropType<string>;
    label: {
        type: import("vue").PropType<string>;
        default: string;
    };
    isDisabled: {
        type: import("vue").PropType<boolean>;
        required: boolean;
        default: boolean;
    };
    isReadonly: {
        type: import("vue").PropType<boolean>;
        required: boolean;
        default: boolean;
    };
    disableIfReadonly: {
        type: import("vue").PropType<boolean>;
        required: boolean;
        default: boolean;
    };
    modelValue: {
        type: import("vue").PropType<T>;
        required: false;
    };
    'onUpdate:modelValue': {
        type: import("vue").PropType<import("fp-ts/lib/function").FunctionN<[T], void>>;
        default: import("fp-ts/lib/function").Lazy<import("fp-ts/lib/function").FunctionN<[T], void>>;
    };
    eq: {
        type: import("vue").PropType<import("fp-ts/lib/Eq").Eq<T>>;
        default: import("fp-ts/lib/function").Lazy<import("fp-ts/lib/Eq").Eq<T>>;
    };
    nativeValue: {
        type: import("vue").PropType<unknown>;
        required: boolean;
        default: null;
    };
    trueValue: {
        type: import("vue").PropType<T>;
        default: T;
    };
    falseValue: {
        type: import("vue").PropType<T>;
        default: T;
    };
    isIndeterminate: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    isMultiple: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    variant: {
        type: import("vue").PropType<import("../../..").ColorVariant>;
        default: import("../../..").ColorVariant;
    };
    size: {
        type: import("vue").PropType<import("../../..").SizeVariant>;
        default: import("../../..").SizeVariant;
    };
    isRequired: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    name: {
        type: import("vue").PropType<string>;
        required: boolean;
    };
}[K] extends BooleanConstructor | {
    type: BooleanConstructor;
} ? boolean : {
    isFocused: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    onFocus: {
        type: import("vue").PropType<(e?: Event | undefined) => void>;
        required: false;
    };
    onBlur: {
        type: import("vue").PropType<(e?: Event | undefined) => void>;
        required: false;
    };
    focusOnMount: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    labelFor: import("vue").PropType<string>;
    label: {
        type: import("vue").PropType<string>;
        default: string;
    };
    isDisabled: {
        type: import("vue").PropType<boolean>;
        required: boolean;
        default: boolean;
    };
    isReadonly: {
        type: import("vue").PropType<boolean>;
        required: boolean;
        default: boolean;
    };
    disableIfReadonly: {
        type: import("vue").PropType<boolean>;
        required: boolean;
        default: boolean;
    };
    modelValue: {
        type: import("vue").PropType<T>;
        required: false;
    };
    'onUpdate:modelValue': {
        type: import("vue").PropType<import("fp-ts/lib/function").FunctionN<[T], void>>;
        default: import("fp-ts/lib/function").Lazy<import("fp-ts/lib/function").FunctionN<[T], void>>;
    };
    eq: {
        type: import("vue").PropType<import("fp-ts/lib/Eq").Eq<T>>;
        default: import("fp-ts/lib/function").Lazy<import("fp-ts/lib/Eq").Eq<T>>;
    };
    nativeValue: {
        type: import("vue").PropType<unknown>;
        required: boolean;
        default: null;
    };
    trueValue: {
        type: import("vue").PropType<T>;
        default: T;
    };
    falseValue: {
        type: import("vue").PropType<T>;
        default: T;
    };
    isIndeterminate: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    isMultiple: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    variant: {
        type: import("vue").PropType<import("../../..").ColorVariant>;
        default: import("../../..").ColorVariant;
    };
    size: {
        type: import("vue").PropType<import("../../..").SizeVariant>;
        default: import("../../..").SizeVariant;
    };
    isRequired: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    name: {
        type: import("vue").PropType<string>;
        required: boolean;
    };
}[K] extends import("vue").Prop<infer V, infer D> ? unknown extends V ? D : V : {
    isFocused: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    onFocus: {
        type: import("vue").PropType<(e?: Event | undefined) => void>;
        required: false;
    };
    onBlur: {
        type: import("vue").PropType<(e?: Event | undefined) => void>;
        required: false;
    };
    focusOnMount: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    labelFor: import("vue").PropType<string>;
    label: {
        type: import("vue").PropType<string>;
        default: string;
    };
    isDisabled: {
        type: import("vue").PropType<boolean>;
        required: boolean;
        default: boolean;
    };
    isReadonly: {
        type: import("vue").PropType<boolean>;
        required: boolean;
        default: boolean;
    };
    disableIfReadonly: {
        type: import("vue").PropType<boolean>;
        required: boolean;
        default: boolean;
    };
    modelValue: {
        type: import("vue").PropType<T>;
        required: false;
    };
    'onUpdate:modelValue': {
        type: import("vue").PropType<import("fp-ts/lib/function").FunctionN<[T], void>>;
        default: import("fp-ts/lib/function").Lazy<import("fp-ts/lib/function").FunctionN<[T], void>>;
    };
    eq: {
        type: import("vue").PropType<import("fp-ts/lib/Eq").Eq<T>>;
        default: import("fp-ts/lib/function").Lazy<import("fp-ts/lib/Eq").Eq<T>>;
    };
    nativeValue: {
        type: import("vue").PropType<unknown>;
        required: boolean;
        default: null;
    };
    trueValue: {
        type: import("vue").PropType<T>;
        default: T;
    };
    falseValue: {
        type: import("vue").PropType<T>;
        default: T;
    };
    isIndeterminate: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    isMultiple: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    variant: {
        type: import("vue").PropType<import("../../..").ColorVariant>;
        default: import("../../..").ColorVariant;
    };
    size: {
        type: import("vue").PropType<import("../../..").SizeVariant>;
        default: import("../../..").SizeVariant;
    };
    isRequired: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    name: {
        type: import("vue").PropType<string>;
        required: boolean;
    };
}[K]; } & { [K_1 in Exclude<"variant", "variant" | "size" | "isFocused" | "isDisabled" | "label" | "focusOnMount" | "onUpdate:modelValue" | "isReadonly" | "disableIfReadonly" | "isRequired" | "eq" | "falseValue" | "nativeValue" | "trueValue" | "isMultiple" | "isIndeterminate" | ({
    type: import("vue").PropType<T>;
    required: false;
} extends BooleanConstructor | {
    required: true;
} | {
    default: any;
} | {
    type: BooleanConstructor;
} ? "modelValue" : never)> | Exclude<"size", "variant" | "size" | "isFocused" | "isDisabled" | "label" | "focusOnMount" | "onUpdate:modelValue" | "isReadonly" | "disableIfReadonly" | "isRequired" | "eq" | "falseValue" | "nativeValue" | "trueValue" | "isMultiple" | "isIndeterminate" | ({
    type: import("vue").PropType<T>;
    required: false;
} extends BooleanConstructor | {
    required: true;
} | {
    default: any;
} | {
    type: BooleanConstructor;
} ? "modelValue" : never)> | Exclude<"name", "variant" | "size" | "isFocused" | "isDisabled" | "label" | "focusOnMount" | "onUpdate:modelValue" | "isReadonly" | "disableIfReadonly" | "isRequired" | "eq" | "falseValue" | "nativeValue" | "trueValue" | "isMultiple" | "isIndeterminate" | ({
    type: import("vue").PropType<T>;
    required: false;
} extends BooleanConstructor | {
    required: true;
} | {
    default: any;
} | {
    type: BooleanConstructor;
} ? "modelValue" : never)> | Exclude<"isFocused", "variant" | "size" | "isFocused" | "isDisabled" | "label" | "focusOnMount" | "onUpdate:modelValue" | "isReadonly" | "disableIfReadonly" | "isRequired" | "eq" | "falseValue" | "nativeValue" | "trueValue" | "isMultiple" | "isIndeterminate" | ({
    type: import("vue").PropType<T>;
    required: false;
} extends BooleanConstructor | {
    required: true;
} | {
    default: any;
} | {
    type: BooleanConstructor;
} ? "modelValue" : never)> | Exclude<"isDisabled", "variant" | "size" | "isFocused" | "isDisabled" | "label" | "focusOnMount" | "onUpdate:modelValue" | "isReadonly" | "disableIfReadonly" | "isRequired" | "eq" | "falseValue" | "nativeValue" | "trueValue" | "isMultiple" | "isIndeterminate" | ({
    type: import("vue").PropType<T>;
    required: false;
} extends BooleanConstructor | {
    required: true;
} | {
    default: any;
} | {
    type: BooleanConstructor;
} ? "modelValue" : never)> | Exclude<"label", "variant" | "size" | "isFocused" | "isDisabled" | "label" | "focusOnMount" | "onUpdate:modelValue" | "isReadonly" | "disableIfReadonly" | "isRequired" | "eq" | "falseValue" | "nativeValue" | "trueValue" | "isMultiple" | "isIndeterminate" | ({
    type: import("vue").PropType<T>;
    required: false;
} extends BooleanConstructor | {
    required: true;
} | {
    default: any;
} | {
    type: BooleanConstructor;
} ? "modelValue" : never)> | Exclude<"labelFor", "variant" | "size" | "isFocused" | "isDisabled" | "label" | "focusOnMount" | "onUpdate:modelValue" | "isReadonly" | "disableIfReadonly" | "isRequired" | "eq" | "falseValue" | "nativeValue" | "trueValue" | "isMultiple" | "isIndeterminate" | ({
    type: import("vue").PropType<T>;
    required: false;
} extends BooleanConstructor | {
    required: true;
} | {
    default: any;
} | {
    type: BooleanConstructor;
} ? "modelValue" : never)> | Exclude<"onFocus", "variant" | "size" | "isFocused" | "isDisabled" | "label" | "focusOnMount" | "onUpdate:modelValue" | "isReadonly" | "disableIfReadonly" | "isRequired" | "eq" | "falseValue" | "nativeValue" | "trueValue" | "isMultiple" | "isIndeterminate" | ({
    type: import("vue").PropType<T>;
    required: false;
} extends BooleanConstructor | {
    required: true;
} | {
    default: any;
} | {
    type: BooleanConstructor;
} ? "modelValue" : never)> | Exclude<"onBlur", "variant" | "size" | "isFocused" | "isDisabled" | "label" | "focusOnMount" | "onUpdate:modelValue" | "isReadonly" | "disableIfReadonly" | "isRequired" | "eq" | "falseValue" | "nativeValue" | "trueValue" | "isMultiple" | "isIndeterminate" | ({
    type: import("vue").PropType<T>;
    required: false;
} extends BooleanConstructor | {
    required: true;
} | {
    default: any;
} | {
    type: BooleanConstructor;
} ? "modelValue" : never)> | Exclude<"focusOnMount", "variant" | "size" | "isFocused" | "isDisabled" | "label" | "focusOnMount" | "onUpdate:modelValue" | "isReadonly" | "disableIfReadonly" | "isRequired" | "eq" | "falseValue" | "nativeValue" | "trueValue" | "isMultiple" | "isIndeterminate" | ({
    type: import("vue").PropType<T>;
    required: false;
} extends BooleanConstructor | {
    required: true;
} | {
    default: any;
} | {
    type: BooleanConstructor;
} ? "modelValue" : never)> | Exclude<"modelValue", "variant" | "size" | "isFocused" | "isDisabled" | "label" | "focusOnMount" | "onUpdate:modelValue" | "isReadonly" | "disableIfReadonly" | "isRequired" | "eq" | "falseValue" | "nativeValue" | "trueValue" | "isMultiple" | "isIndeterminate" | ({
    type: import("vue").PropType<T>;
    required: false;
} extends BooleanConstructor | {
    required: true;
} | {
    default: any;
} | {
    type: BooleanConstructor;
} ? "modelValue" : never)> | Exclude<"onUpdate:modelValue", "variant" | "size" | "isFocused" | "isDisabled" | "label" | "focusOnMount" | "onUpdate:modelValue" | "isReadonly" | "disableIfReadonly" | "isRequired" | "eq" | "falseValue" | "nativeValue" | "trueValue" | "isMultiple" | "isIndeterminate" | ({
    type: import("vue").PropType<T>;
    required: false;
} extends BooleanConstructor | {
    required: true;
} | {
    default: any;
} | {
    type: BooleanConstructor;
} ? "modelValue" : never)> | Exclude<"isReadonly", "variant" | "size" | "isFocused" | "isDisabled" | "label" | "focusOnMount" | "onUpdate:modelValue" | "isReadonly" | "disableIfReadonly" | "isRequired" | "eq" | "falseValue" | "nativeValue" | "trueValue" | "isMultiple" | "isIndeterminate" | ({
    type: import("vue").PropType<T>;
    required: false;
} extends BooleanConstructor | {
    required: true;
} | {
    default: any;
} | {
    type: BooleanConstructor;
} ? "modelValue" : never)> | Exclude<"disableIfReadonly", "variant" | "size" | "isFocused" | "isDisabled" | "label" | "focusOnMount" | "onUpdate:modelValue" | "isReadonly" | "disableIfReadonly" | "isRequired" | "eq" | "falseValue" | "nativeValue" | "trueValue" | "isMultiple" | "isIndeterminate" | ({
    type: import("vue").PropType<T>;
    required: false;
} extends BooleanConstructor | {
    required: true;
} | {
    default: any;
} | {
    type: BooleanConstructor;
} ? "modelValue" : never)> | Exclude<"isRequired", "variant" | "size" | "isFocused" | "isDisabled" | "label" | "focusOnMount" | "onUpdate:modelValue" | "isReadonly" | "disableIfReadonly" | "isRequired" | "eq" | "falseValue" | "nativeValue" | "trueValue" | "isMultiple" | "isIndeterminate" | ({
    type: import("vue").PropType<T>;
    required: false;
} extends BooleanConstructor | {
    required: true;
} | {
    default: any;
} | {
    type: BooleanConstructor;
} ? "modelValue" : never)> | Exclude<"eq", "variant" | "size" | "isFocused" | "isDisabled" | "label" | "focusOnMount" | "onUpdate:modelValue" | "isReadonly" | "disableIfReadonly" | "isRequired" | "eq" | "falseValue" | "nativeValue" | "trueValue" | "isMultiple" | "isIndeterminate" | ({
    type: import("vue").PropType<T>;
    required: false;
} extends BooleanConstructor | {
    required: true;
} | {
    default: any;
} | {
    type: BooleanConstructor;
} ? "modelValue" : never)> | Exclude<"falseValue", "variant" | "size" | "isFocused" | "isDisabled" | "label" | "focusOnMount" | "onUpdate:modelValue" | "isReadonly" | "disableIfReadonly" | "isRequired" | "eq" | "falseValue" | "nativeValue" | "trueValue" | "isMultiple" | "isIndeterminate" | ({
    type: import("vue").PropType<T>;
    required: false;
} extends BooleanConstructor | {
    required: true;
} | {
    default: any;
} | {
    type: BooleanConstructor;
} ? "modelValue" : never)> | Exclude<"nativeValue", "variant" | "size" | "isFocused" | "isDisabled" | "label" | "focusOnMount" | "onUpdate:modelValue" | "isReadonly" | "disableIfReadonly" | "isRequired" | "eq" | "falseValue" | "nativeValue" | "trueValue" | "isMultiple" | "isIndeterminate" | ({
    type: import("vue").PropType<T>;
    required: false;
} extends BooleanConstructor | {
    required: true;
} | {
    default: any;
} | {
    type: BooleanConstructor;
} ? "modelValue" : never)> | Exclude<"trueValue", "variant" | "size" | "isFocused" | "isDisabled" | "label" | "focusOnMount" | "onUpdate:modelValue" | "isReadonly" | "disableIfReadonly" | "isRequired" | "eq" | "falseValue" | "nativeValue" | "trueValue" | "isMultiple" | "isIndeterminate" | ({
    type: import("vue").PropType<T>;
    required: false;
} extends BooleanConstructor | {
    required: true;
} | {
    default: any;
} | {
    type: BooleanConstructor;
} ? "modelValue" : never)> | Exclude<"isMultiple", "variant" | "size" | "isFocused" | "isDisabled" | "label" | "focusOnMount" | "onUpdate:modelValue" | "isReadonly" | "disableIfReadonly" | "isRequired" | "eq" | "falseValue" | "nativeValue" | "trueValue" | "isMultiple" | "isIndeterminate" | ({
    type: import("vue").PropType<T>;
    required: false;
} extends BooleanConstructor | {
    required: true;
} | {
    default: any;
} | {
    type: BooleanConstructor;
} ? "modelValue" : never)> | Exclude<"isIndeterminate", "variant" | "size" | "isFocused" | "isDisabled" | "label" | "focusOnMount" | "onUpdate:modelValue" | "isReadonly" | "disableIfReadonly" | "isRequired" | "eq" | "falseValue" | "nativeValue" | "trueValue" | "isMultiple" | "isIndeterminate" | ({
    type: import("vue").PropType<T>;
    required: false;
} extends BooleanConstructor | {
    required: true;
} | {
    default: any;
} | {
    type: BooleanConstructor;
} ? "modelValue" : never)>]?: ({
    isFocused: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    onFocus: {
        type: import("vue").PropType<(e?: Event | undefined) => void>;
        required: false;
    };
    onBlur: {
        type: import("vue").PropType<(e?: Event | undefined) => void>;
        required: false;
    };
    focusOnMount: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    labelFor: import("vue").PropType<string>;
    label: {
        type: import("vue").PropType<string>;
        default: string;
    };
    isDisabled: {
        type: import("vue").PropType<boolean>;
        required: boolean;
        default: boolean;
    };
    isReadonly: {
        type: import("vue").PropType<boolean>;
        required: boolean;
        default: boolean;
    };
    disableIfReadonly: {
        type: import("vue").PropType<boolean>;
        required: boolean;
        default: boolean;
    };
    modelValue: {
        type: import("vue").PropType<T>;
        required: false;
    };
    'onUpdate:modelValue': {
        type: import("vue").PropType<import("fp-ts/lib/function").FunctionN<[T], void>>;
        default: import("fp-ts/lib/function").Lazy<import("fp-ts/lib/function").FunctionN<[T], void>>;
    };
    eq: {
        type: import("vue").PropType<import("fp-ts/lib/Eq").Eq<T>>;
        default: import("fp-ts/lib/function").Lazy<import("fp-ts/lib/Eq").Eq<T>>;
    };
    nativeValue: {
        type: import("vue").PropType<unknown>;
        required: boolean;
        default: null;
    };
    trueValue: {
        type: import("vue").PropType<T>;
        default: T;
    };
    falseValue: {
        type: import("vue").PropType<T>;
        default: T;
    };
    isIndeterminate: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    isMultiple: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    variant: {
        type: import("vue").PropType<import("../../..").ColorVariant>;
        default: import("../../..").ColorVariant;
    };
    size: {
        type: import("vue").PropType<import("../../..").SizeVariant>;
        default: import("../../..").SizeVariant;
    };
    isRequired: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    name: {
        type: import("vue").PropType<string>;
        required: boolean;
    };
}[K_1] extends null ? any : {
    isFocused: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    onFocus: {
        type: import("vue").PropType<(e?: Event | undefined) => void>;
        required: false;
    };
    onBlur: {
        type: import("vue").PropType<(e?: Event | undefined) => void>;
        required: false;
    };
    focusOnMount: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    labelFor: import("vue").PropType<string>;
    label: {
        type: import("vue").PropType<string>;
        default: string;
    };
    isDisabled: {
        type: import("vue").PropType<boolean>;
        required: boolean;
        default: boolean;
    };
    isReadonly: {
        type: import("vue").PropType<boolean>;
        required: boolean;
        default: boolean;
    };
    disableIfReadonly: {
        type: import("vue").PropType<boolean>;
        required: boolean;
        default: boolean;
    };
    modelValue: {
        type: import("vue").PropType<T>;
        required: false;
    };
    'onUpdate:modelValue': {
        type: import("vue").PropType<import("fp-ts/lib/function").FunctionN<[T], void>>;
        default: import("fp-ts/lib/function").Lazy<import("fp-ts/lib/function").FunctionN<[T], void>>;
    };
    eq: {
        type: import("vue").PropType<import("fp-ts/lib/Eq").Eq<T>>;
        default: import("fp-ts/lib/function").Lazy<import("fp-ts/lib/Eq").Eq<T>>;
    };
    nativeValue: {
        type: import("vue").PropType<unknown>;
        required: boolean;
        default: null;
    };
    trueValue: {
        type: import("vue").PropType<T>;
        default: T;
    };
    falseValue: {
        type: import("vue").PropType<T>;
        default: T;
    };
    isIndeterminate: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    isMultiple: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    variant: {
        type: import("vue").PropType<import("../../..").ColorVariant>;
        default: import("../../..").ColorVariant;
    };
    size: {
        type: import("vue").PropType<import("../../..").SizeVariant>;
        default: import("../../..").SizeVariant;
    };
    isRequired: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    name: {
        type: import("vue").PropType<string>;
        required: boolean;
    };
}[K_1] extends {
    type: true | null;
} ? any : {
    isFocused: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    onFocus: {
        type: import("vue").PropType<(e?: Event | undefined) => void>;
        required: false;
    };
    onBlur: {
        type: import("vue").PropType<(e?: Event | undefined) => void>;
        required: false;
    };
    focusOnMount: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    labelFor: import("vue").PropType<string>;
    label: {
        type: import("vue").PropType<string>;
        default: string;
    };
    isDisabled: {
        type: import("vue").PropType<boolean>;
        required: boolean;
        default: boolean;
    };
    isReadonly: {
        type: import("vue").PropType<boolean>;
        required: boolean;
        default: boolean;
    };
    disableIfReadonly: {
        type: import("vue").PropType<boolean>;
        required: boolean;
        default: boolean;
    };
    modelValue: {
        type: import("vue").PropType<T>;
        required: false;
    };
    'onUpdate:modelValue': {
        type: import("vue").PropType<import("fp-ts/lib/function").FunctionN<[T], void>>;
        default: import("fp-ts/lib/function").Lazy<import("fp-ts/lib/function").FunctionN<[T], void>>;
    };
    eq: {
        type: import("vue").PropType<import("fp-ts/lib/Eq").Eq<T>>;
        default: import("fp-ts/lib/function").Lazy<import("fp-ts/lib/Eq").Eq<T>>;
    };
    nativeValue: {
        type: import("vue").PropType<unknown>;
        required: boolean;
        default: null;
    };
    trueValue: {
        type: import("vue").PropType<T>;
        default: T;
    };
    falseValue: {
        type: import("vue").PropType<T>;
        default: T;
    };
    isIndeterminate: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    isMultiple: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    variant: {
        type: import("vue").PropType<import("../../..").ColorVariant>;
        default: import("../../..").ColorVariant;
    };
    size: {
        type: import("vue").PropType<import("../../..").SizeVariant>;
        default: import("../../..").SizeVariant;
    };
    isRequired: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    name: {
        type: import("vue").PropType<string>;
        required: boolean;
    };
}[K_1] extends ObjectConstructor | {
    type: ObjectConstructor;
} ? Record<string, any> : {
    isFocused: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    onFocus: {
        type: import("vue").PropType<(e?: Event | undefined) => void>;
        required: false;
    };
    onBlur: {
        type: import("vue").PropType<(e?: Event | undefined) => void>;
        required: false;
    };
    focusOnMount: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    labelFor: import("vue").PropType<string>;
    label: {
        type: import("vue").PropType<string>;
        default: string;
    };
    isDisabled: {
        type: import("vue").PropType<boolean>;
        required: boolean;
        default: boolean;
    };
    isReadonly: {
        type: import("vue").PropType<boolean>;
        required: boolean;
        default: boolean;
    };
    disableIfReadonly: {
        type: import("vue").PropType<boolean>;
        required: boolean;
        default: boolean;
    };
    modelValue: {
        type: import("vue").PropType<T>;
        required: false;
    };
    'onUpdate:modelValue': {
        type: import("vue").PropType<import("fp-ts/lib/function").FunctionN<[T], void>>;
        default: import("fp-ts/lib/function").Lazy<import("fp-ts/lib/function").FunctionN<[T], void>>;
    };
    eq: {
        type: import("vue").PropType<import("fp-ts/lib/Eq").Eq<T>>;
        default: import("fp-ts/lib/function").Lazy<import("fp-ts/lib/Eq").Eq<T>>;
    };
    nativeValue: {
        type: import("vue").PropType<unknown>;
        required: boolean;
        default: null;
    };
    trueValue: {
        type: import("vue").PropType<T>;
        default: T;
    };
    falseValue: {
        type: import("vue").PropType<T>;
        default: T;
    };
    isIndeterminate: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    isMultiple: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    variant: {
        type: import("vue").PropType<import("../../..").ColorVariant>;
        default: import("../../..").ColorVariant;
    };
    size: {
        type: import("vue").PropType<import("../../..").SizeVariant>;
        default: import("../../..").SizeVariant;
    };
    isRequired: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    name: {
        type: import("vue").PropType<string>;
        required: boolean;
    };
}[K_1] extends BooleanConstructor | {
    type: BooleanConstructor;
} ? boolean : {
    isFocused: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    onFocus: {
        type: import("vue").PropType<(e?: Event | undefined) => void>;
        required: false;
    };
    onBlur: {
        type: import("vue").PropType<(e?: Event | undefined) => void>;
        required: false;
    };
    focusOnMount: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    labelFor: import("vue").PropType<string>;
    label: {
        type: import("vue").PropType<string>;
        default: string;
    };
    isDisabled: {
        type: import("vue").PropType<boolean>;
        required: boolean;
        default: boolean;
    };
    isReadonly: {
        type: import("vue").PropType<boolean>;
        required: boolean;
        default: boolean;
    };
    disableIfReadonly: {
        type: import("vue").PropType<boolean>;
        required: boolean;
        default: boolean;
    };
    modelValue: {
        type: import("vue").PropType<T>;
        required: false;
    };
    'onUpdate:modelValue': {
        type: import("vue").PropType<import("fp-ts/lib/function").FunctionN<[T], void>>;
        default: import("fp-ts/lib/function").Lazy<import("fp-ts/lib/function").FunctionN<[T], void>>;
    };
    eq: {
        type: import("vue").PropType<import("fp-ts/lib/Eq").Eq<T>>;
        default: import("fp-ts/lib/function").Lazy<import("fp-ts/lib/Eq").Eq<T>>;
    };
    nativeValue: {
        type: import("vue").PropType<unknown>;
        required: boolean;
        default: null;
    };
    trueValue: {
        type: import("vue").PropType<T>;
        default: T;
    };
    falseValue: {
        type: import("vue").PropType<T>;
        default: T;
    };
    isIndeterminate: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    isMultiple: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    variant: {
        type: import("vue").PropType<import("../../..").ColorVariant>;
        default: import("../../..").ColorVariant;
    };
    size: {
        type: import("vue").PropType<import("../../..").SizeVariant>;
        default: import("../../..").SizeVariant;
    };
    isRequired: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    name: {
        type: import("vue").PropType<string>;
        required: boolean;
    };
}[K_1] extends import("vue").Prop<infer V, infer D> ? unknown extends V ? D : V : {
    isFocused: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    onFocus: {
        type: import("vue").PropType<(e?: Event | undefined) => void>;
        required: false;
    };
    onBlur: {
        type: import("vue").PropType<(e?: Event | undefined) => void>;
        required: false;
    };
    focusOnMount: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    labelFor: import("vue").PropType<string>;
    label: {
        type: import("vue").PropType<string>;
        default: string;
    };
    isDisabled: {
        type: import("vue").PropType<boolean>;
        required: boolean;
        default: boolean;
    };
    isReadonly: {
        type: import("vue").PropType<boolean>;
        required: boolean;
        default: boolean;
    };
    disableIfReadonly: {
        type: import("vue").PropType<boolean>;
        required: boolean;
        default: boolean;
    };
    modelValue: {
        type: import("vue").PropType<T>;
        required: false;
    };
    'onUpdate:modelValue': {
        type: import("vue").PropType<import("fp-ts/lib/function").FunctionN<[T], void>>;
        default: import("fp-ts/lib/function").Lazy<import("fp-ts/lib/function").FunctionN<[T], void>>;
    };
    eq: {
        type: import("vue").PropType<import("fp-ts/lib/Eq").Eq<T>>;
        default: import("fp-ts/lib/function").Lazy<import("fp-ts/lib/Eq").Eq<T>>;
    };
    nativeValue: {
        type: import("vue").PropType<unknown>;
        required: boolean;
        default: null;
    };
    trueValue: {
        type: import("vue").PropType<T>;
        default: T;
    };
    falseValue: {
        type: import("vue").PropType<T>;
        default: T;
    };
    isIndeterminate: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    isMultiple: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    variant: {
        type: import("vue").PropType<import("../../..").ColorVariant>;
        default: import("../../..").ColorVariant;
    };
    size: {
        type: import("vue").PropType<import("../../..").SizeVariant>;
        default: import("../../..").SizeVariant;
    };
    isRequired: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    name: {
        type: import("vue").PropType<string>;
        required: boolean;
    };
}[K_1]) | undefined; }>, { [K_2 in "variant" | "size" | "isFocused" | "isDisabled" | "label" | "focusOnMount" | "onUpdate:modelValue" | "isReadonly" | "disableIfReadonly" | "isRequired" | "eq" | "falseValue" | "nativeValue" | "trueValue" | "isMultiple" | "isIndeterminate" | ({
    type: import("vue").PropType<T>;
    required: false;
} extends BooleanConstructor | {
    default: any;
} | {
    type: BooleanConstructor;
} ? "modelValue" : never)]: {
    isFocused: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    onFocus: {
        type: import("vue").PropType<(e?: Event | undefined) => void>;
        required: false;
    };
    onBlur: {
        type: import("vue").PropType<(e?: Event | undefined) => void>;
        required: false;
    };
    focusOnMount: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    labelFor: import("vue").PropType<string>;
    label: {
        type: import("vue").PropType<string>;
        default: string;
    };
    isDisabled: {
        type: import("vue").PropType<boolean>;
        required: boolean;
        default: boolean;
    };
    isReadonly: {
        type: import("vue").PropType<boolean>;
        required: boolean;
        default: boolean;
    };
    disableIfReadonly: {
        type: import("vue").PropType<boolean>;
        required: boolean;
        default: boolean;
    };
    modelValue: {
        type: import("vue").PropType<T>;
        required: false;
    };
    'onUpdate:modelValue': {
        type: import("vue").PropType<import("fp-ts/lib/function").FunctionN<[T], void>>;
        default: import("fp-ts/lib/function").Lazy<import("fp-ts/lib/function").FunctionN<[T], void>>;
    };
    eq: {
        type: import("vue").PropType<import("fp-ts/lib/Eq").Eq<T>>;
        default: import("fp-ts/lib/function").Lazy<import("fp-ts/lib/Eq").Eq<T>>;
    };
    nativeValue: {
        type: import("vue").PropType<unknown>;
        required: boolean;
        default: null;
    };
    trueValue: {
        type: import("vue").PropType<T>;
        default: T;
    };
    falseValue: {
        type: import("vue").PropType<T>;
        default: T;
    };
    isIndeterminate: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    isMultiple: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    variant: {
        type: import("vue").PropType<import("../../..").ColorVariant>;
        default: import("../../..").ColorVariant;
    };
    size: {
        type: import("vue").PropType<import("../../..").SizeVariant>;
        default: import("../../..").SizeVariant;
    };
    isRequired: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    name: {
        type: import("vue").PropType<string>;
        required: boolean;
    };
}[K_2] extends null ? any : {
    isFocused: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    onFocus: {
        type: import("vue").PropType<(e?: Event | undefined) => void>;
        required: false;
    };
    onBlur: {
        type: import("vue").PropType<(e?: Event | undefined) => void>;
        required: false;
    };
    focusOnMount: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    labelFor: import("vue").PropType<string>;
    label: {
        type: import("vue").PropType<string>;
        default: string;
    };
    isDisabled: {
        type: import("vue").PropType<boolean>;
        required: boolean;
        default: boolean;
    };
    isReadonly: {
        type: import("vue").PropType<boolean>;
        required: boolean;
        default: boolean;
    };
    disableIfReadonly: {
        type: import("vue").PropType<boolean>;
        required: boolean;
        default: boolean;
    };
    modelValue: {
        type: import("vue").PropType<T>;
        required: false;
    };
    'onUpdate:modelValue': {
        type: import("vue").PropType<import("fp-ts/lib/function").FunctionN<[T], void>>;
        default: import("fp-ts/lib/function").Lazy<import("fp-ts/lib/function").FunctionN<[T], void>>;
    };
    eq: {
        type: import("vue").PropType<import("fp-ts/lib/Eq").Eq<T>>;
        default: import("fp-ts/lib/function").Lazy<import("fp-ts/lib/Eq").Eq<T>>;
    };
    nativeValue: {
        type: import("vue").PropType<unknown>;
        required: boolean;
        default: null;
    };
    trueValue: {
        type: import("vue").PropType<T>;
        default: T;
    };
    falseValue: {
        type: import("vue").PropType<T>;
        default: T;
    };
    isIndeterminate: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    isMultiple: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    variant: {
        type: import("vue").PropType<import("../../..").ColorVariant>;
        default: import("../../..").ColorVariant;
    };
    size: {
        type: import("vue").PropType<import("../../..").SizeVariant>;
        default: import("../../..").SizeVariant;
    };
    isRequired: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    name: {
        type: import("vue").PropType<string>;
        required: boolean;
    };
}[K_2] extends {
    type: true | null;
} ? any : {
    isFocused: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    onFocus: {
        type: import("vue").PropType<(e?: Event | undefined) => void>;
        required: false;
    };
    onBlur: {
        type: import("vue").PropType<(e?: Event | undefined) => void>;
        required: false;
    };
    focusOnMount: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    labelFor: import("vue").PropType<string>;
    label: {
        type: import("vue").PropType<string>;
        default: string;
    };
    isDisabled: {
        type: import("vue").PropType<boolean>;
        required: boolean;
        default: boolean;
    };
    isReadonly: {
        type: import("vue").PropType<boolean>;
        required: boolean;
        default: boolean;
    };
    disableIfReadonly: {
        type: import("vue").PropType<boolean>;
        required: boolean;
        default: boolean;
    };
    modelValue: {
        type: import("vue").PropType<T>;
        required: false;
    };
    'onUpdate:modelValue': {
        type: import("vue").PropType<import("fp-ts/lib/function").FunctionN<[T], void>>;
        default: import("fp-ts/lib/function").Lazy<import("fp-ts/lib/function").FunctionN<[T], void>>;
    };
    eq: {
        type: import("vue").PropType<import("fp-ts/lib/Eq").Eq<T>>;
        default: import("fp-ts/lib/function").Lazy<import("fp-ts/lib/Eq").Eq<T>>;
    };
    nativeValue: {
        type: import("vue").PropType<unknown>;
        required: boolean;
        default: null;
    };
    trueValue: {
        type: import("vue").PropType<T>;
        default: T;
    };
    falseValue: {
        type: import("vue").PropType<T>;
        default: T;
    };
    isIndeterminate: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    isMultiple: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    variant: {
        type: import("vue").PropType<import("../../..").ColorVariant>;
        default: import("../../..").ColorVariant;
    };
    size: {
        type: import("vue").PropType<import("../../..").SizeVariant>;
        default: import("../../..").SizeVariant;
    };
    isRequired: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    name: {
        type: import("vue").PropType<string>;
        required: boolean;
    };
}[K_2] extends ObjectConstructor | {
    type: ObjectConstructor;
} ? Record<string, any> : {
    isFocused: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    onFocus: {
        type: import("vue").PropType<(e?: Event | undefined) => void>;
        required: false;
    };
    onBlur: {
        type: import("vue").PropType<(e?: Event | undefined) => void>;
        required: false;
    };
    focusOnMount: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    labelFor: import("vue").PropType<string>;
    label: {
        type: import("vue").PropType<string>;
        default: string;
    };
    isDisabled: {
        type: import("vue").PropType<boolean>;
        required: boolean;
        default: boolean;
    };
    isReadonly: {
        type: import("vue").PropType<boolean>;
        required: boolean;
        default: boolean;
    };
    disableIfReadonly: {
        type: import("vue").PropType<boolean>;
        required: boolean;
        default: boolean;
    };
    modelValue: {
        type: import("vue").PropType<T>;
        required: false;
    };
    'onUpdate:modelValue': {
        type: import("vue").PropType<import("fp-ts/lib/function").FunctionN<[T], void>>;
        default: import("fp-ts/lib/function").Lazy<import("fp-ts/lib/function").FunctionN<[T], void>>;
    };
    eq: {
        type: import("vue").PropType<import("fp-ts/lib/Eq").Eq<T>>;
        default: import("fp-ts/lib/function").Lazy<import("fp-ts/lib/Eq").Eq<T>>;
    };
    nativeValue: {
        type: import("vue").PropType<unknown>;
        required: boolean;
        default: null;
    };
    trueValue: {
        type: import("vue").PropType<T>;
        default: T;
    };
    falseValue: {
        type: import("vue").PropType<T>;
        default: T;
    };
    isIndeterminate: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    isMultiple: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    variant: {
        type: import("vue").PropType<import("../../..").ColorVariant>;
        default: import("../../..").ColorVariant;
    };
    size: {
        type: import("vue").PropType<import("../../..").SizeVariant>;
        default: import("../../..").SizeVariant;
    };
    isRequired: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    name: {
        type: import("vue").PropType<string>;
        required: boolean;
    };
}[K_2] extends BooleanConstructor | {
    type: BooleanConstructor;
} ? boolean : {
    isFocused: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    onFocus: {
        type: import("vue").PropType<(e?: Event | undefined) => void>;
        required: false;
    };
    onBlur: {
        type: import("vue").PropType<(e?: Event | undefined) => void>;
        required: false;
    };
    focusOnMount: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    labelFor: import("vue").PropType<string>;
    label: {
        type: import("vue").PropType<string>;
        default: string;
    };
    isDisabled: {
        type: import("vue").PropType<boolean>;
        required: boolean;
        default: boolean;
    };
    isReadonly: {
        type: import("vue").PropType<boolean>;
        required: boolean;
        default: boolean;
    };
    disableIfReadonly: {
        type: import("vue").PropType<boolean>;
        required: boolean;
        default: boolean;
    };
    modelValue: {
        type: import("vue").PropType<T>;
        required: false;
    };
    'onUpdate:modelValue': {
        type: import("vue").PropType<import("fp-ts/lib/function").FunctionN<[T], void>>;
        default: import("fp-ts/lib/function").Lazy<import("fp-ts/lib/function").FunctionN<[T], void>>;
    };
    eq: {
        type: import("vue").PropType<import("fp-ts/lib/Eq").Eq<T>>;
        default: import("fp-ts/lib/function").Lazy<import("fp-ts/lib/Eq").Eq<T>>;
    };
    nativeValue: {
        type: import("vue").PropType<unknown>;
        required: boolean;
        default: null;
    };
    trueValue: {
        type: import("vue").PropType<T>;
        default: T;
    };
    falseValue: {
        type: import("vue").PropType<T>;
        default: T;
    };
    isIndeterminate: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    isMultiple: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    variant: {
        type: import("vue").PropType<import("../../..").ColorVariant>;
        default: import("../../..").ColorVariant;
    };
    size: {
        type: import("vue").PropType<import("../../..").SizeVariant>;
        default: import("../../..").SizeVariant;
    };
    isRequired: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    name: {
        type: import("vue").PropType<string>;
        required: boolean;
    };
}[K_2] extends import("vue").Prop<infer V, infer D> ? unknown extends V ? D : V : {
    isFocused: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    onFocus: {
        type: import("vue").PropType<(e?: Event | undefined) => void>;
        required: false;
    };
    onBlur: {
        type: import("vue").PropType<(e?: Event | undefined) => void>;
        required: false;
    };
    focusOnMount: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    labelFor: import("vue").PropType<string>;
    label: {
        type: import("vue").PropType<string>;
        default: string;
    };
    isDisabled: {
        type: import("vue").PropType<boolean>;
        required: boolean;
        default: boolean;
    };
    isReadonly: {
        type: import("vue").PropType<boolean>;
        required: boolean;
        default: boolean;
    };
    disableIfReadonly: {
        type: import("vue").PropType<boolean>;
        required: boolean;
        default: boolean;
    };
    modelValue: {
        type: import("vue").PropType<T>;
        required: false;
    };
    'onUpdate:modelValue': {
        type: import("vue").PropType<import("fp-ts/lib/function").FunctionN<[T], void>>;
        default: import("fp-ts/lib/function").Lazy<import("fp-ts/lib/function").FunctionN<[T], void>>;
    };
    eq: {
        type: import("vue").PropType<import("fp-ts/lib/Eq").Eq<T>>;
        default: import("fp-ts/lib/function").Lazy<import("fp-ts/lib/Eq").Eq<T>>;
    };
    nativeValue: {
        type: import("vue").PropType<unknown>;
        required: boolean;
        default: null;
    };
    trueValue: {
        type: import("vue").PropType<T>;
        default: T;
    };
    falseValue: {
        type: import("vue").PropType<T>;
        default: T;
    };
    isIndeterminate: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    isMultiple: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    variant: {
        type: import("vue").PropType<import("../../..").ColorVariant>;
        default: import("../../..").ColorVariant;
    };
    size: {
        type: import("vue").PropType<import("../../..").SizeVariant>;
        default: import("../../..").SizeVariant;
    };
    isRequired: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    name: {
        type: import("vue").PropType<string>;
        required: boolean;
    };
}[K_2]; }>;
export declare const BRadio: import("vue").DefineComponent<{
    isFocused: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    onFocus: {
        type: import("vue").PropType<(e?: Event | undefined) => void>;
        required: false;
    };
    onBlur: {
        type: import("vue").PropType<(e?: Event | undefined) => void>;
        required: false;
    };
    focusOnMount: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    labelFor: import("vue").PropType<string>;
    label: {
        type: import("vue").PropType<string>;
        default: string;
    };
    isDisabled: {
        type: import("vue").PropType<boolean>;
        required: boolean;
        default: boolean;
    };
    isReadonly: {
        type: import("vue").PropType<boolean>;
        required: boolean;
        default: boolean;
    };
    disableIfReadonly: {
        type: import("vue").PropType<boolean>;
        required: boolean;
        default: boolean;
    };
    modelValue: {
        type: import("vue").PropType<unknown>;
        required: false;
    };
    'onUpdate:modelValue': {
        type: import("vue").PropType<import("fp-ts/lib/function").FunctionN<[unknown], void>>;
        default: import("fp-ts/lib/function").Lazy<import("fp-ts/lib/function").FunctionN<[unknown], void>>;
    };
    eq: {
        type: import("vue").PropType<import("fp-ts/lib/Eq").Eq<unknown>>;
        default: import("fp-ts/lib/function").Lazy<import("fp-ts/lib/Eq").Eq<unknown>>;
    };
    nativeValue: {
        type: import("vue").PropType<unknown>;
        required: boolean;
        default: null;
    };
    trueValue: {
        type: import("vue").PropType<unknown>;
        default: unknown;
    };
    falseValue: {
        type: import("vue").PropType<unknown>;
        default: unknown;
    };
    isIndeterminate: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    isMultiple: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    variant: {
        type: import("vue").PropType<import("../../..").ColorVariant>;
        default: import("../../..").ColorVariant;
    };
    size: {
        type: import("vue").PropType<import("../../..").SizeVariant>;
        default: import("../../..").SizeVariant;
    };
    isRequired: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    name: {
        type: import("vue").PropType<string>;
        required: boolean;
    };
}, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    variant: import("../../..").ColorVariant;
    size: import("../../..").SizeVariant;
    isFocused: boolean;
    isDisabled: boolean;
    label: string;
    focusOnMount: boolean;
    "onUpdate:modelValue": import("fp-ts/lib/function").FunctionN<[unknown], void>;
    isReadonly: boolean;
    disableIfReadonly: boolean;
    isRequired: boolean;
    eq: import("fp-ts/lib/Eq").Eq<unknown>;
    falseValue: unknown;
    nativeValue: null;
    trueValue: unknown;
    isMultiple: boolean;
    isIndeterminate: boolean;
} & {
    name?: string | undefined;
    labelFor?: string | undefined;
    onFocus?: ((e?: Event | undefined) => void) | undefined;
    onBlur?: ((e?: Event | undefined) => void) | undefined;
    modelValue?: unknown;
}>, {
    variant: import("../../..").ColorVariant;
    size: import("../../..").SizeVariant;
    isFocused: boolean;
    isDisabled: boolean;
    label: string;
    focusOnMount: boolean;
    "onUpdate:modelValue": import("fp-ts/lib/function").FunctionN<[unknown], void>;
    isReadonly: boolean;
    disableIfReadonly: boolean;
    isRequired: boolean;
    eq: import("fp-ts/lib/Eq").Eq<unknown>;
    falseValue: unknown;
    nativeValue: null;
    trueValue: unknown;
    isMultiple: boolean;
    isIndeterminate: boolean;
}>;
